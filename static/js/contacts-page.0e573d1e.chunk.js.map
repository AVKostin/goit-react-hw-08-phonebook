{"version":3,"file":"static/js/contacts-page.0e573d1e.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-08-phonebook/./src/components/LoaderButton/LoaderButton.module.css?55b0","components/LoaderButton/LoaderButton.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactsList/ContactsItem/styles.module.css?63a5","components/ContactsList/ContactsItem/ContactsItem.jsx","components/ContactsList/ContactsList.jsx","pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"LoaderButton_wrapper__pjSem\"};","import { Oval } from 'react-loader-spinner';\nimport styles from './LoaderButton.module.css';\n\nexport const LoaderButton = () => {\n  return (\n    <div className={styles.wrapper}>\n      <Oval\n        ariaLabel=\"loading-indicator\"\n        height={35}\n        width={35}\n        strokeWidth={8}\n        color=\"white\"\n        secondaryColor=\"red\"\n      />\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"titleName\":\"ContactForm_titleName__YfhZd\"};","import * as React from 'react';\nimport { useState } from 'react';\nimport { toast } from 'react-toastify';\nimport { useDispatch, useSelector } from 'react-redux';\nimport ImportContactsIcon from '@mui/icons-material/ImportContacts';\nimport {\n  Avatar,\n  Container,\n  Typography,\n  Button,\n  TextField,\n  Box,\n  Tooltip,\n} from '@mui/material';\nimport {\n  addContact,\n  fetchContacts,\n} from 'redux/operations/operations-contacts';\nimport selectors from 'redux/selectors';\nimport { LoaderButton } from 'components/LoaderButton';\nimport styles from '../ContactForm/ContactForm.module.css';\n\nconst { getContacts, getContactsStatus } = selectors;\n\nconst NAME_REGEX = /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/;\n// /^(?=.{2,25}$)(?![' -])(?!.*[ '-]{2})[a-zA-Zа-яА-Я' -]+(?<![' -])$/;\nconst NUMBER_REGEX = /^\\+?[0-9]?[0-9]?([0-9]{10})$/;\n// /^\\+?([0-9]{2})\\)?[-. ]?([0-9]{3})[-. ]?([0-9]{3})[-. ]?([0-9]{4})$/;\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n  const isCreating = useSelector(getContactsStatus) === 'creating';\n  const [values, setValues] = useState({\n    name: '',\n    number: '',\n  });\n  const [errors, setErrors] = useState({\n    name: '',\n    number: '',\n  });\n\n  const reset = () => {\n    setValues({\n      name: '',\n      number: '',\n    });\n  };\n  const validationField = (name, value, regex) => {\n    if (value.match(regex)) {\n      setValues({\n        ...values,\n        [name]: value,\n      });\n      setErrors({\n        ...errors,\n        [name]: '',\n      });\n      return true;\n    } else {\n      if (value) {\n        setValues({\n          ...values,\n          [name]: value,\n        });\n        setErrors({\n          ...errors,\n          [name]: `wrong ${name}`,\n        });\n        return false;\n      } else {\n        setValues({\n          ...values,\n          [name]: value,\n        });\n        setErrors({\n          ...errors,\n          [name]: `${name} is required`,\n        });\n        return false;\n      }\n    }\n  };\n\n  const handleChange = event => {\n    const { name, value } = event.currentTarget;\n    switch (name) {\n      case 'name':\n        validationField(name, value, NAME_REGEX);\n        // setName(value);\n        break;\n      case 'number':\n        validationField(name, value, NUMBER_REGEX);\n        // setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const hasName = contacts.find(contact => contact.name === values.name);\n    const hasNumber = contacts.find(\n      contact => contact.number === values.number\n    );\n    if (hasName) {\n      toast.warn(`Name is already in contacts.`);\n      return;\n    }\n    if (hasNumber) {\n      toast.warn(`Number is already in contacts.`);\n      return;\n    }\n    if (\n      validationField('name', values.name, NAME_REGEX) &&\n      validationField('number', values.number, NUMBER_REGEX)\n    ) {\n      const contact = {\n        name: values.name,\n        number: values.number,\n      };\n      dispatch(addContact(contact))\n        .unwrap()\n        .then(res => {\n          toast.success(`${res.name} is add in contacts.`);\n          dispatch(fetchContacts())\n            .unwrap()\n            .then(() => {\n              toast.success(`Contacts updated`);\n            })\n            .catch(() => {\n              toast.error(`Contacts didn't updated`);\n            });\n          reset();\n        })\n        .catch(() => {\n          toast.error(`${values.name} isn't add in contacts.`);\n        });\n    }\n  };\n  return (\n    <Container component=\"div\" maxWidth=\"xs\">\n      <Box\n        sx={{\n          marginTop: 3,\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n        }}\n      >\n        <div className={styles.titleName}>\n          <Avatar sx={{ m: 1, bgcolor: 'orange' }}>\n            <ImportContactsIcon />\n          </Avatar>\n          <Typography component=\"h1\" variant=\"h4\">\n            Phonebook\n          </Typography>\n        </div>\n\n        <Box\n          component=\"form\"\n          onSubmit={handleSubmit}\n          noValidate\n          sx={{\n            mt: 3,\n          }}\n        >\n          <Tooltip title=\"Name may contain only letters, apostrophe, dash and spaces\">\n            <TextField\n              margin=\"normal\"\n              error={!!errors.name}\n              helperText={errors.name}\n              required\n              fullWidth\n              id=\"name\"\n              name=\"name\"\n              value={values.name}\n              label=\"Name\"\n              autoComplete=\"name\"\n              onChange={handleChange}\n            />\n          </Tooltip>\n          <Tooltip title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\">\n            <TextField\n              margin=\"normal\"\n              error={!!errors.number}\n              helperText={errors.number}\n              required\n              fullWidth\n              id=\"number\"\n              name=\"number\"\n              value={values.number}\n              type=\"tel\"\n              label=\"Number\"\n              autoComplete=\"current-password\"\n              onChange={handleChange}\n            />\n          </Tooltip>\n          <Button\n            type=\"submit\"\n            fullWidth\n            variant=\"contained\"\n            sx={{\n              ':hover': {\n                bgcolor: 'rgba(39, 183, 35, 0.459)',\n                color: 'black',\n              },\n              color: 'black',\n              backgroundColor: '#e4f9f5fa',\n              borderColor: 'green',\n            }}\n          >\n            {isCreating ? <LoaderButton /> : 'Add Contact'}\n          </Button>\n        </Box>\n      </Box>\n    </Container>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"contactsList\":\"styles_contactsList__jsDQS\",\"phoneNumber\":\"styles_phoneNumber__J2zE-\",\"contactName\":\"styles_contactName__qfqFT\",\"listItem\":\"styles_listItem__k5oOb\",\"buttons\":\"styles_buttons__3d7NZ\"};","import PropTypes from 'prop-types';\nimport { useState } from 'react';\nimport { toast } from 'react-toastify';\nimport { useDispatch } from 'react-redux';\nimport { BsTelephone } from 'react-icons/bs';\nimport { IoIosContact } from 'react-icons/io';\nimport { useSelector } from 'react-redux';\nimport { CircularProgress, Link } from '@mui/material';\nimport { MdOutlineDeleteForever } from 'react-icons/md';\nimport {\n  deleteContact,\n  fetchContacts,\n} from 'redux/operations/operations-contacts';\nimport selectors from 'redux/selectors';\nimport styles from './styles.module.css';\n\nconst { getContactsStatus } = selectors;\n\nexport const ContactsItem = props => {\n  const { id, name, number } = props;\n  const dispatch = useDispatch();\n  const deleting = useSelector(getContactsStatus) === 'deleting';\n  const [isDeleting, setDeleting] = useState(deleting);\n\n  const handleDeleteContact = async id => {\n    setDeleting(true);\n    dispatch(deleteContact(id))\n      .unwrap()\n      .then(res => {\n        toast.success(`Contact \"${name}\" is deleting`);\n        dispatch(fetchContacts())\n          .unwrap()\n          .then(() => {\n            toast.success(`Contacts updated`);\n          })\n          .catch(() => {\n            toast.error(`Contacts didn't updated`);\n          });\n      })\n      .catch(error => {\n        setDeleting(false);\n        console.log(error.message);\n        toast.error(`Contact \"${name}\" is not deleting`);\n      });\n  };\n  return (\n    <>\n      <li className={styles.listItem}>\n        <span className={styles.contactName}>\n          <IoIosContact size={20} />: {name}{' '}\n        </span>\n        <span className={styles.phoneNumber}>\n          <Link\n            href={`tel:${number}`}\n            color=\"blue\"\n            underline=\"hover\"\n            sx={{ display: 'flex' }}\n          >\n            <BsTelephone size={15} />\n            <span> : </span>\n            {number}\n          </Link>\n        </span>\n        <button\n          className={styles.buttons}\n          onClick={() => handleDeleteContact(id)}\n        >\n          {isDeleting ? (\n            <CircularProgress size={24} color=\"error\" />\n          ) : (\n            <MdOutlineDeleteForever size={30} />\n          )}\n        </button>\n      </li>\n    </>\n  );\n};\n\nContactsItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { Container, TextField, Tooltip, InputAdornment } from '@mui/material';\nimport AccountCircle from '@mui/icons-material/AccountCircle';\n\nimport LoaderPage from 'components/LoaderPage';\nimport { ContactsItem } from './ContactsItem';\nimport selectors from 'redux/selectors';\nimport { fetchContacts } from 'redux/operations/operations-contacts';\nimport { setFilterValue } from 'redux/slice/contactsSlice';\nimport styles from './ContactsItem/styles.module.css';\n\nconst { getContactsStatus, getFilterValue, getFilteredContacts } = selectors;\n\nexport const ContactsList = () => {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(fetchContacts())\n      .unwrap()\n      .then(() => {\n        toast.success(`Contacts updated`);\n      })\n      .catch(() => {\n        toast.error(`Contacts didn't updated`);\n      });\n  }, [dispatch]);\n  const contacts = useSelector(getFilteredContacts);\n  const ContactsStatus = useSelector(getContactsStatus);\n  const isLoading = ContactsStatus === 'loading';\n  const value = useSelector(getFilterValue);\n  const handleFilterValue = event => {\n    dispatch(setFilterValue(event.target.value));\n  };\n  return (\n    <Container component=\"div\" maxWidth=\"xs\">\n      {isLoading && <LoaderPage />}\n\n      <Tooltip title=\"Find contacts. Please enter a name or number for search.\">\n        <TextField\n          variant=\"outlined\"\n          margin=\"dense\"\n          fullWidth\n          id=\"name\"\n          name=\"name\"\n          value={value}\n          label=\"Enter a search name or number\"\n          autoComplete=\"name\"\n          onChange={handleFilterValue}\n          InputProps={{\n            startAdornment: (\n              <InputAdornment position=\"start\">\n                <AccountCircle />\n              </InputAdornment>\n            ),\n          }}\n        />\n      </Tooltip>\n\n      <ul className={styles.contactsList}>\n        {contacts.map(({ id, name, number }) => (\n          <ContactsItem key={id} name={name} number={number} id={id} />\n        ))}\n      </ul>\n    </Container>\n  );\n};\n","import { ContactForm } from 'components/ContactForm';\nimport { ContactsList } from 'components/ContactsList';\n\nconst ContactsPage = () => {\n  return (\n    <main>\n      <ContactForm />\n      <ContactsList />\n    </main>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["LoaderButton","className","styles","ariaLabel","height","width","strokeWidth","color","secondaryColor","getContacts","selectors","getContactsStatus","NAME_REGEX","NUMBER_REGEX","ContactForm","dispatch","useDispatch","contacts","useSelector","isCreating","useState","name","number","values","setValues","errors","setErrors","validationField","value","regex","match","handleChange","event","currentTarget","Container","component","maxWidth","Box","sx","marginTop","display","flexDirection","alignItems","Avatar","m","bgcolor","ImportContacts","Typography","variant","onSubmit","preventDefault","hasName","find","contact","hasNumber","toast","addContact","unwrap","then","res","fetchContacts","catch","noValidate","mt","Tooltip","title","TextField","margin","error","helperText","required","fullWidth","id","label","autoComplete","onChange","type","Button","backgroundColor","borderColor","ContactsItem","props","deleting","isDeleting","setDeleting","handleDeleteContact","deleteContact","console","log","message","size","Link","href","underline","onClick","CircularProgress","getFilterValue","getFilteredContacts","ContactsList","useEffect","isLoading","LoaderPage","setFilterValue","target","InputProps","startAdornment","InputAdornment","position","AccountCircle","map"],"sourceRoot":""}